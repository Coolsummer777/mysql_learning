首先说一下字符集和编码的问题
ASCII码一共128个字符，可以用7位二进制数来表示

Latin 1，单字节的字符集，可以表示0~255一共256个字符，包括了（向下兼容）ASCII码。所有的英文符号都可以在这个字符集中找到。
Latin 1是mysql的默认字符集

GBK
GBK支持中英文的变长编码，即一个字节的符号表示英文，两位的表示中文。GBK包括了常用汉字。
GB2312中包括的汉字，GBK与其保持一致。

Unicode
Unicode把世界上所有的符号纳入其中，每一个符号都分配一个唯一的编码，一共一百多万个符号。
Unicode解决了字符的编码问题，但是没有解决这些编码应该如何存储的问题。
如果使用统一长度的存储方式，对于那些编码位置比较靠前的字符，二进制编码前部会有大量的0，导致空间的浪费

utf-8
utf-8是一种Unicode的实现方式，是互联网上使用最广泛的一种编码方式。其他实现方式还有utf-16（用两个字节或者四个字节标识字符）和uft-32（用四个字节表示字符），但是互联网基本不用。
uft-8最大的特点是变长的编码方式，可以用1-4个字节表示一个符号，根据符号的不同变化字节长度。
编码规则：
1）对于单字节的符号，字节第一位设为0，后7位是该符号的Unicode码。单字节的符号一共允许存在128个，也就是ASCII码对应的128个符号。这些符号的ASCII码和utf-8的编码是相同的
2）对于n（n>1）个字节的符号，第一个字节的前n位设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下没有提及的二进制位，全部为这个符号的Unicode编码。举例：一个三字节的符号 1110xxxx 10xxxxxx 10xxxxxx，其中的x，都可以用作存储该符号的Unicode码。
值得注意的是，utf-8采用的是小端式（little end）存储，即数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中（和阅读习惯相反，大端法和阅读习惯相同）
【注】虽然utf-8本身也支持4个字节的表示方法，但是mysql中只支持最大3字节。

uft8mb4
uf8 most bytes 4，最多占用4个字节的utf-8。mysql在版本5.5.3之后支持该字符集。
是utf-8的超集，添加了一些罕见的汉字和一些表情符号等。
目前阿里巴巴的默认数据库字符集就是utf8mb4

===========================开始说char和varchar的分割线================================
char(n)，固定长度为n的字符串。n的取值为0~255，这里的n表示多少个字符，而不是多少个字节。

    当插入长度小于n的字符串时，mysql服务器层会自动在末尾用空格补齐，例如定义了char(5),插入“abc”，会自动补齐成为“abc空格空格”进行存储。
    InnoDB在检索出这个字符串的时候，会把末尾的空格自动去掉，所以查询刚才插入的数据会得到“abc”，而不是“abc空格空格”。但是当插入的数据是“abc空格”时，mysql服务器还是会补齐成为“abc空格空格”，但是查询的时候得到的是“abc”。这里丢掉了一个原来的空格，因为InnoDB并不能区分空格是数据自己的还是服务器层补齐的，所以一律去掉。
    【注】这里说的“去掉空格”，指的是查询出来的返回结果不带右侧空格，使用了trim()，不改变存储内容。

    如果插入的字符串左边或者中间有空格，则不会受到影响，比如插入“ab空格c”，或者“空格空格abc”，查询后数据中的空格都可以得到保留。
    如果插入了长度超过n的字符串，在没有设置严格模式（strict SQL mode）的时候，截断超长的部分，设置了严格模式后会报错。但是如果是因为带了很多的空格导致的，比如插入了“abc空格空格空格空格空格”，会静默截断右边的空格到指定长度n，然后在查询的时候还会再去掉右侧的空格。

    【注】在支持utf8mb4以前，char(255)最多占用765个字节，当使用了utf8mb4以后可能会超出。如果char(255)占用的长度超过了768个字节（相当于多出一个utf-8字符），mysql会自动将char(255)转变成变长字符串

varchar(n)，长度上限是n的变长字符串，n的取值是0~65535，这里的n也指的是字符，而不是字节。（mysql5之后是字符，mysql4及以前认为是字节）
    
    由于是定长，varchar需要单独的空间来记录真实字节长度。如果长度在0~255字节，则使用1个字节；如果超过255，则需要2个字节来记录。
    加上一个字节作为结束位，所以varchar最多可以使用的字节数是65532，具体能够表示多少字符，取决于字符集和实际存储的符号。
    mysql单列的长度上线是65535（阿里OceanBase中做了加大），所以在没有其他列存在的情况下，varchar的上限也是就是65535。

    varchar(n)插入长度超过n的字符串，会默认截断，并且声成警告。
    如果插入长度不够n的，则不会进行填充，也不会在查询的时候去掉右侧的空格。

    InnoDB会把变长字符串放在页外。

char和varchar的比较
    char(n)定长，n表示长度；varchar(n)不定长，n表示长度上限。这里的n都是指n个字符。
    一般来说，varchar会比char更加节省空间，但是会产生内存碎片，需要将表导出再导入进行消除；char则在字符串长度不固定的时候产生了空间的浪费；因此大多数时候认为，定长字符串（比如id，MD5的值等）使用char，变长的使用varchar
    但是考虑到varchar需要额外的字节记录长度，在短记录内反而会成为劣势，比如存储1~3位字符的时候；此外由于varchar还有计算长度的时间消耗，导致性能上会低于char，因此在短记录，或者记录长度变化差距不大的时候也可以考虑使用char

【其他】
    对于长度超过varchar上限的记录，可以考虑使用text或者blob。
    text又分为了tinytext~longtext四个具体类型，可以存储的数据范围不一样；text存储的是字符
    blob同样分为四个具体类型，但是blob存储的是二进制字符串，不考虑编码的问题，因此blob可以用来存储图像等内容，text只能用于纯文本