=========================================================
mysql锁机制

按照操作分
    读锁
        是共享锁，可以同时读
        Session1 给 table1 加 读锁
            Session1 可以读 table1
            Session1 不可以写 table1（写失败，Error报错）
            Session1 不可以读 table2
            Session2 可以读 table1
            Session2 不可以写 table1（阻塞等待，等到table1释放以后继续）
            Session2 可以读 table2

    写锁
        独占锁
        Session1 给 table1 加 写锁
            Session1 可以读 table1
            Session1 可以写 table1
            Session1 不可以读 table2（Error报错）
            Session2 不可以读 table1（阻塞等待，table1被Session1独占，等到table1被unlock后继续执行）
            Session2 不可以写 table1
            Session2 可以读 table2

    手动增加共享锁
        select in share lock

    手动增加排他锁
        select for update

按粒度分

    全局锁
        对整个库加锁
        数据库处于只读状态，数据写入和修改表结构等操作会阻塞。
        一般在全局备份的时候使用

    表锁（MyISAM使用的锁）
        偏向读取
        偏向MyISAM引擎（MyISAM只支持表锁）
        开销小，加锁快；无死锁；锁定粒度大，锁冲突概率高，并发度低
        查看表上的锁
            show open tables
        手动增加表锁
            lock table table_name1 read, table_name2 write; 
        释放表
            unlock tables;
        查看锁的使用状况
            show status like '%table%'
                Table_lock_immediate：产生表级锁定的次数，表示可以立即获得锁的查询次数，每次立即获取锁，值+1
                Table_lock_waited：表示出现表级锁定争用而发生的等待次数（不能立即获取锁的次数，每等待一次+1），此值高说明出现了严重的表计锁争用情况
        总结：
            MyISAM在执行查询语句之前，会给涉及到的所有表加读锁，在执行增删改之前，会给涉及的表加写锁
            加读锁以后，不会阻塞其他进程对同一表的读操作，但是会阻塞对同一表的写请求，直到读锁释放
            加写锁以后，会阻塞其他进程对同一表的读写请求，直到写锁释放
            （重要）MyISAM的读写锁调度是写优先，因此MyISAM不适合作为写操作频繁的表的引擎。因为频繁的写操作会使其他线程大量阻塞

    行锁
        偏向InnoDB存储引擎
        开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率最低，并发度最高
        InnoDB和MyISAM最大的两个不同点：InnoDB采用了行锁，InnoDB支持事务 
        InnoDB在写操作发生时会对涉及到的该行加行写锁
            由于事务的隔离性为RR（可重复读），事务A对某行的修改在提交前不会影响到其他事务，事务B在事务A修改前后读取的该条数据值应该时相同的（可重复读，满足隔离性）

        无索引会导致行锁升级成表锁
            事务A使用了某些操作使得索引失效（比如不等于，数据类型转换），此时行锁被升级成表锁（此时事务A尚未提交）。
            此时同时在访问表的事务B的操作会被阻塞

        手工为某一行数据上锁
            在检索语句的后面加上for update 
            SELECT …… FROM table_name WHERE …… for update
            此时其他对此行的操作会被阻塞，直到commit提交事务释放锁

        间隙锁
            当用范围条件而不是相等条件检索数据,并请求共享或排他锁时,InnoDB会给符合条件的已有数据的索引项加锁;对于键值在条件范围内但是并不存在的记录,叫做间隙"GAP"。InnoDB也会对"间隙"加锁,这种机制称为间隙锁(GAP锁)
            不存在的但是在指定范围内的数据（“无辜”被加锁，GAP锁）和存在于指定范围内的数据（正常需要被加锁的数据）合起来成为Next-key锁
            危害
                当锁定一个范围键值后即使某些不存在的键值也会被无辜的锁定,在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下可能会对性能造成很大危害。

        行锁使用分析
            查询命令
                show status like 'innodb_row_lock%'
            主要关注
                current_waits：当前正在等待锁定的数量
                waits：系统启动后到现在总计的等待次数
                time_avg：平均等待时间

        行锁优化建议
            尽量让数据检索都通过索引来完成（没有索引行锁会升级成表锁）
            合理设置索引，缩小锁的范围
            尽量减少检索条件，避免间隙锁（间隙锁可能会造成写等待）
            尽量控制事务大小，减少锁定资源量和时间长度
            尽可能降低事务的隔离级别

    页锁（简单了解）
        开销和加锁时间介于表锁和行锁之间
        会出现死锁
        粒度介于两者之间
        并发度一般


意向锁
    又叫做元数据锁，不需要显示生命
    通过alter table修改表结构，或者加索引的时候会自动加元数据写锁
    对表进行增删改的时候会加元数据读锁


=========================================================
主从复制（前三个问题详见redis）
    复制的基本原理
        slave从master读取binlog来进行数据同步
        步骤
            1.master将改变记录到二进制日志（binary log）。此过程叫做二进制日志事件。
            2，slave将master中的binary log events拷贝到它的中继日志（relay events）
            3.slave重做中继日志中的事件，将改变应用到自己的数据库中。
        mysql的复制是异步且串行化的
    
    复制的基本原则
        每个slave只有一个master
        每个slave只有唯一的一个服务器ID
        每个master可以有多个slave

    复制最大的问题
        延时
    
    一主一从常见配置
        mysql版本一致却后台以服务运行
        主从都配置在mysqld节点下，都是小写
        ……
        （后续还有详细操作未整理完，见尚硅谷mysql高级视频63）

=========================================================
mysql事务

事务的特点（ACID）
    原子性(Atomicity)：事务是一个原子操作单元，其对事务的修改要么全部执行要么全部不执行
    一致性(Consistency)：事务开始和完成时，数据都必须保持一致状态（数据只能从一个一致状态变到另一个一致状态），意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性；事务结束时，所有的内部数据结构（B+树索引或者双向链表）也都必须是正确的。
    隔离性(Isolation)：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理的中间过程对外部不可见。反之亦然。
    持久性(Durable)：事务完成后，它对数据的修改是永久性的，即使出现系统故障也会保持

并发事务带来的问题（其实就是并发带来的问题）
    更新丢失(Lost Update)：多个事务同时选定修改同一行，然后基于最初选定的值进行更新，由于每个事务都不知道其他事务的存在，使得最后的更新覆盖了由其他事务所作的更新
        解决方案：加写锁（一个事务完成前另一个事务不能访问）
    脏读(Dirty Reads)：事务A读取了事务B修改但是尚未提交的数据，还根据此数据进行了操作。如果事务B回滚，则A取得的数据无效，不符合一致性要求。
    不可重复读(Non-Repeatable Reads)：一个数据在读取某些数据后的某个时间，再次读取以前读过的数据，发现数据已经发生了改变或者被删除。也就是事务A读取到了事务B已经提交修改的数据，不符合隔离性。
    幻读(Phantom Reads)：事务A按照相同的查询条件检索以前检索过的数据，读取了事务B插入了满足搜索条件的新数据(如果事务B回滚,则新数据失效)，不符合隔离性。

    幻读和脏读
        脏读是事务A读到了事务B修改的数据(B的回滚导致A读错了)
        幻读是事务A读到了事务B新增的数据(B的回滚导致A读多了)


事务的隔离级别
    隔离级别                                        数据一致性                             脏读       不可重复读       幻读 

    未提交读(Read uncommitted,RU)           最低,只保证不读取物理上损坏的数据                 是           是           是
    已提交读(Read committed,RC)                         语句级                              否           是           是
    可重复度(Repeatable read,RR)                        事务级                              否           否           是
    串行化(Serializable)                           最高级别,事务级                           否           否           否
    
    查看当前隔离级别
        show variavles like 'tx_isolation'

    默认隔离级别
        可重复度(可能会产生幻读)

=========================================================
MVCC





======================================================
分布式事务
分布式锁
两阶段提交
三阶段提交